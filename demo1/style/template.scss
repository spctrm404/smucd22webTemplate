/* stylelint-disable no-descending-specificity */
/* stylelint-disable no-duplicate-selectors */

// todo
// make placeholder for font
// make it compact

@use 'sass:string';
@import 'customizations';
@import 'globalFunctions';

@mixin applyBreakpoint(
  $sectionSideW,
  $sectionCenterW,
  $containerPaddingX,
  $gridColumnNum,
  $gridGapX,
  $gridGapY
) {
  .section {
    grid-template-columns: $sectionSideW $sectionCenterW $sectionSideW;
    &:last-of-type,
    &:only-of-type {
      > .container {
        padding-bottom: 0;
      }
    }
  }
  .container {
    padding-inline: $containerPaddingX;
    padding-top: 3 * $gridGapY;
    padding-bottom: $yGapSolivingPadding;
    &.grid {
      grid-template-columns: repeat($gridColumnNum, minmax(0, 1fr));
      row-gap: $gridGapY;
      column-gap: $gridGapX;
    }
    @at-root .flex {
      @include flexItemEvenSizeDistributor($gridColumnNum);
    }
  }
  %apply-padding-x {
    padding-inline: $containerPaddingX;
  }
  %apply-padding-t {
    padding-top: 3 * $gridGapY;
  }
  %apply-padding-b {
    padding-bottom: 3 * $gridGapY;
  }
  %apply-padding-t-half {
    padding-top: 1.5 * $gridGapY;
  }
  %apply-padding-b-half {
    padding-bottom: 1.5 * $gridGapY;
  }
  %apply-padding-y {
    padding-block: 3 * $gridGapY;
  }
  %apply-padding-y-half {
    padding-block: 1.5 * $gridGapY;
  }
  %apply-gap-x {
    column-gap: $gridGapX;
  }
  %apply-gap-y {
    row-gap: $gridGapY;
  }
  .smucd.section--type-text {
    .container {
      row-gap: $gridGapY;
      column-gap: $gridGapX;
    }
  }
}

@mixin createGridItemModClasses($columnNum, $bpPrefix: '') {
  @if ($bpPrefix == '') {
    @for $i from 1 through $columnNum {
      @if (($i != $columnNum) and ($i != calc($columnNum / 2))) {
        .grid-w-#{$i} {
          grid-column-end: span $i;
        }
      }
      .grid-h-#{$i} {
        grid-row-end: span $i;
      }
    }
    @for $start from 1 through $columnNum {
      .grid-x-#{$start} {
        grid-column-start: $start;
      }
      .grid-y-#{$start} {
        grid-row-start: $start;
      }
      @for $to from 1 through ($columnNum - ($start - 1)) {
        .grid-x-#{$start}-w-#{$to} {
          grid-column: $start #{'/'} span $to;
        }
      }
      @for $to from 1 through (12 - ($start - 1)) {
        .grid-y-#{$start}-h-#{$to} {
          grid-row: $start #{'/'} span $to;
        }
      }
    }
  } @else {
    @for $i from 1 through $columnNum {
      @if (($i != $columnNum) and ($i != calc($columnNum / 2))) {
        .#{$bpPrefix}-grid-w-#{$i} {
          grid-column-end: span $i;
        }
      }
      .#{$bpPrefix}-grid-h-#{$i} {
        grid-row-end: span $i;
      }
    }
    @for $start from 1 through $columnNum {
      .#{$bpPrefix}-grid-x-#{$start} {
        grid-column-start: $start;
      }
      .#{$bpPrefix}-grid-y-#{$start} {
        grid-row-start: $start;
      }
      @for $to from 1 through ($columnNum - ($start - 1)) {
        .#{$bpPrefix}-grid-x-#{$start}-w-#{$to} {
          grid-column: $start #{'/'} span $to;
        }
      }
      @for $to from 1 through (12 - ($start - 1)) {
        .#{$bpPrefix}-grid-y-#{$start}-h-#{$to} {
          grid-row: $start #{'/'} span $to;
        }
      }
    }
  }
}

@mixin createGridItemSizeClassesWithoutPrefix($columnNum) {
  .grid-w-half {
    grid-column-end: span calc($columnNum / 2);
  }
  .grid-w-full {
    grid-column-end: span $columnNum;
  }
}

@mixin createGridItemSizeClassesWithPrefix($columnNum, $bpPrefix: '') {
  .#{$bpPrefix}-grid-w-half {
    grid-column-end: span calc($columnNum / 2);
  }
  .#{$bpPrefix}-grid-w-full {
    grid-column-end: span $columnNum;
  }
}

@mixin flexItemEvenSizeDistributor($columnNum) {
  @for $i from 1 through 12 {
    & > *:first-child:nth-last-child(#{$i}),
    & > *:first-child:nth-last-child(#{$i}) ~ * {
      @if ($i > $columnNum) {
        flex-basis: calc(100% / $columnNum);
      } @else {
        $calibratedI: (($i - 1) % $columnNum) + 1;
        flex-basis: calc(100% / $calibratedI);
      }
    }
  }
}

@mixin createFlexItemModClasses($columnNum, $bpPrefix: '') {
  @if ($bpPrefix == '') {
    .flex-w-full {
      flex-basis: 100%;
    }
    .flex-w-half {
      flex-basis: calc(100% / 2);
    }
    @for $divisor from 2 through $columnNum {
      @for $dividend from 1 to $divisor {
        @if (calc($dividend / $divisor) != calc(1 / 2)) {
          .flex-w-#{$dividend}-#{$divisor} {
            flex-basis: calc(100% / $divisor * $dividend);
          }
        }
      }
    }
  } @else {
    .#{$bpPrefix}-flex-w-full {
      flex-basis: 100%;
    }
    .#{$bpPrefix}-flex-w-half {
      flex-basis: calc(100% / 2);
    }
    @for $divisor from 2 through $columnNum {
      @for $dividend from 1 to $divisor {
        @if (calc($dividend / $divisor) != calc(1 / 2)) {
          .#{$bpPrefix}-flex-w-#{$dividend}-#{$divisor} {
            flex-basis: calc(100% / $divisor * $dividend);
          }
        }
      }
    }
  }
}

@mixin createHiddenClasses($bpPrefix: '') {
  $className: #{&};
  $className: string.slice($className, 2);
  @if ($bpPrefix == '') {
    #{&}.#{&}--hidden {
      display: none;
    }
  } @else {
    #{&}.#{$bpPrefix}-#{$className}--hidden {
      display: none;
    }
  }
}

@mixin createTextClasses($fontPrefix) {
  @for $hierarchy from 1 through 3 {
    $key: #{$fontPrefix} + '-body-' + #{$hierarchy};
    .font-body-#{$hierarchy},
    %font-body-#{$hierarchy} {
      @include getFontPropertiesFromStyle($key);
    }
    $key: #{$fontPrefix} + '-body-' + #{$hierarchy};
    .font-body-#{$hierarchy}-dense,
    %font-body-#{$hierarchy}-dense {
      @include getFontPropertiesFromStyle($key);
    }
  }
  @for $hierarchy from 1 through 6 {
    $key: #{$fontPrefix} + '-heading-' + #{$hierarchy};
    .font-heading-#{$hierarchy},
    %font-heading-#{$hierarchy} {
      @include getFontPropertiesFromStyle($key);
    }
  }
}

body {
  background-color: getColorByToken('bg-dark');
}

.section {
  position: relative;
  display: grid;
  grid-template-rows: minmax(0, auto) $yGapSolivingPadding;
  &:not(:first-of-type),
  &:not(:only-of-type) {
    margin-top: -1 * $yGapSolivingPadding;
  }
  &:last-of-type,
  &:only-of-type {
    grid-template-rows: minmax(0, auto) 0;
  }
  &__bg {
    position: relative;
    z-index: -1;
    &--left {
      grid-row: 1 #{'/'} span 2;
      grid-column: 1 #{'/'} span 1;
      background-color: transparent;
    }
    &--right {
      grid-row: 1 #{'/'} span 2;
      grid-column: 3 #{'/'} span 1;
      background-color: transparent;
    }
  }
}

.container {
  grid-row: 1 #{'/'} span 2;
  grid-column: 2 #{'/'} span 1;
  width: 100%;
  overflow: hidden;
  background-color: getColorByToken('bg-light');
  &.grid {
    display: grid;
    &--rowH-even {
      grid-auto-rows: minmax(0, 1fr);
    }
  }
  &.flex {
    display: flex;
    flex-wrap: wrap;
    align-items: stretch;
    justify-content: center;
  }
  &#{&}--w-full {
    grid-column: 1 #{'/'} span 3;
  }
  &--h-full {
    min-height: 100vh;
  }
  &#{&}--px-0 {
    padding-inline: 0;
  }
  &#{&}--py-0 {
    padding-top: 0;
  }
  > * {
    overflow: hidden;
  }
}

.smucd.section {
  > .container {
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
    justify-content: center;
  }
  &--type {
    &-text {
      > .container > * {
        max-width: 60ch;
        text-align: center;
        &.text--boxAlign {
          &-left {
            align-self: flex-start;
          }
          &-right {
            align-self: flex-end;
          }
        }
        &.text--textAlign {
          &-left {
            text-align: left;
          }
          &-right {
            text-align: right;
          }
        }
      }
    }
    &-media {
      > .container {
        align-items: stretch;
        padding-inline: 0;
      }
      &.smucd:nth-last-of-type(2) > .container {
        padding-bottom: 0;
      }
    }
    &-header {
      > .container {
        align-items: stretch;
        padding-inline: 0;
        padding-top: 0;
        > .info {
          @extend %apply-padding-x;
          @extend %apply-padding-t;
          @extend %apply-padding-b-half;
          @include al($align: 4, $gap: 1em);
          color: getColorByToken('onSurface-dark');
          background-color: getColorByToken('bg-dark');
          > .profilePic {
            flex-shrink: 0;
            width: 3.5em;
            aspect-ratio: 1 #{'/'} 1;
            background-color: getColorByToken('color-dark', 'primary');
            border-radius: 9999rem;
          }
          > .wrap {
            @include al($isDirX: false, $align: 1, $gap: 0.25em);
            .title {
              @extend %font-body-1-dense;
              font-weight: 700 !important;
            }
            .name {
              @extend %font-body-3-dense;
            }
          }
        }
      }
    }
    &-footer {
      > .container {
        align-items: stretch;
        padding-inline: 0;
        > .designInfo {
          @extend %font-heading-5;
          @extend %apply-padding-x;
          @extend %apply-padding-y;
          @include al($align: 5);
          color: getColorByToken('onSurface-dark');
          background-color: getColorByToken('surface-1-dark');
        }
        > .designerInfo {
          @extend %apply-padding-x;
          @extend %apply-padding-y;
          @include al($align: 4, $gap: 1em);
          color: getColorByToken('onSurface-dark');
          background-color: getColorByToken('surface-3-dark');
          > .profilePic {
            flex-shrink: 0;
            width: 3.5em;
            aspect-ratio: 1 #{'/'} 1;
            background-color: getColorByToken('color-dark', 'primary');
            border-radius: 9999rem;
          }
          > .wrap {
            @include al($isDirX: false, $align: 1, $gap: 0.25em);
            .name {
              @extend %font-body-2-dense;
              font-weight: 700 !important;
            }
            .quote {
              @extend %font-body-3-dense;
            }
          }
        }
      }
      .smucd.section--type-media + & > .container {
        padding-top: 0;
      }
    }
  }
}

@include eq('hnd') {
  @include applyBreakpoint(0, 100%, 1.5rem, 4, 1rem, 1rem);
}

@include eq('tblSm') {
  @include applyBreakpoint(0, 100%, 1.5rem, 12, 1rem, 1rem);
}

@include eq('tblLg') {
  @include applyBreakpoint(1fr, 52.5rem, 2.25rem, 12, 1.5rem, 1.5rem);
}

@include eq('lpt') {
  @include applyBreakpoint(
    0,
    100%,
    min(calc(60 / 1440 * 100%), 3.75rem),
    12,
    1.5rem,
    1.5rem
  );
}

@include eq('dsk') {
  @include applyBreakpoint(
    1fr,
    minmax(0, 90rem),
    min(calc(60 / 1440 * 100%), 3.75rem),
    12,
    1.5rem,
    1.5rem
  );
}

@include ge('hnd') {
  @include createTextClasses('sm');
  .container {
    @include getFontPropertiesFromStyle('sm-body-2');
    @include createGridItemSizeClassesWithoutPrefix(4);
    @include createGridItemModClasses(4);
  }
  .section {
    .container {
      @include createFlexItemModClasses(4);
    }
  }
}

@include ge('tblSm') {
  .container {
    @include createGridItemSizeClassesWithoutPrefix(12);
    @include createGridItemSizeClassesWithPrefix(12, 'tblSm-ge');
  }
  .section {
    @at-root {
      @include createHiddenClasses('tblSm-ge');
    }
    .container {
      @include createFlexItemModClasses(12, 'tblSm-ge');
    }
  }
}

@include ge('tblLg') {
  @include createTextClasses('md');
  .container {
    @include getFontPropertiesFromStyle('md-body-2');
    @include createGridItemSizeClassesWithPrefix(12, 'tblSm-ge');
    @include createGridItemSizeClassesWithPrefix(12, 'tblLg-ge');
  }
  .section {
    @at-root {
      @include createHiddenClasses('tblLg-ge');
    }
    .container {
      @include createFlexItemModClasses(12, 'tblSm-ge');
      @include createFlexItemModClasses(12, 'tblLg-ge');
    }
  }
}

@include ge('lpt') {
  @include createTextClasses('lg');
  .container {
    @include getFontPropertiesFromStyle('lg-body-2');
    @include createGridItemSizeClassesWithPrefix(12, 'tblSm-ge');
    @include createGridItemSizeClassesWithPrefix(12, 'tblLg-ge');
    @include createGridItemSizeClassesWithPrefix(12, 'lpt-ge');
  }
  .section {
    @at-root {
      @include createHiddenClasses('lpt-ge');
    }
    .container {
      @include createFlexItemModClasses(12, 'tblSm-ge');
      @include createFlexItemModClasses(12, 'tblLg-ge');
      @include createFlexItemModClasses(12, 'lpt-ge');
    }
  }
}

@include ge('dsk') {
  .container {
    @include createGridItemSizeClassesWithPrefix(12, 'tblSm-ge');
    @include createGridItemSizeClassesWithPrefix(12, 'tblLg-ge');
    @include createGridItemSizeClassesWithPrefix(12, 'lpt-ge');
    @include createGridItemSizeClassesWithPrefix(12, 'dsk-ge');
  }
  .section {
    @at-root {
      @include createHiddenClasses('dsk-ge');
    }
    .container {
      @include createFlexItemModClasses(12, 'tblSm-ge');
      @include createFlexItemModClasses(12, 'tblLg-ge');
      @include createFlexItemModClasses(12, 'lpt-ge');
      @include createFlexItemModClasses(12, 'dsk-ge');
    }
  }
}

@include le('hnd') {
  .section {
    @at-root {
      @include createHiddenClasses('hnd-le');
    }
  }
}

@include le('tblSm') {
  .section {
    @at-root {
      @include createHiddenClasses('tblSm-le');
    }
  }
}

@include le('tblLg') {
  .section {
    @at-root {
      @include createHiddenClasses('tblLg-le');
    }
  }
}

@include le('lpt') {
  .section {
    @at-root {
      @include createHiddenClasses('lpt-le');
    }
  }
}

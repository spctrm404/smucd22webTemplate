/* stylelint-disable no-descending-specificity */
/* stylelint-disable no-duplicate-selectors */

// todo
// make placeholder for font
// make it compact

@use 'sass:string';
@import 'customizations';
@import 'globalFunctions';

@mixin applyBreakpoint(
  $sectionSideW,
  $sectionCenterW,
  $containerPaddingX,
  $gridColumnNum,
  $gridGapX,
  $gridGapY
) {
  .section {
    grid-template-columns: $sectionSideW $sectionCenterW $sectionSideW;
    &:last-of-type,
    &:only-of-type {
      > .container {
        padding-bottom: 0;
      }
    }
  }
  .container {
    padding-inline: $containerPaddingX;
    padding-top: 3 * $gridGapY;
    padding-bottom: $yGapSolivingPadding;
  }
  %apply-padding-x {
    padding-inline: $containerPaddingX;
  }
  %apply-padding-t {
    padding-top: 3 * $gridGapY;
  }
  %apply-padding-t-double {
    padding-top: 6 * $gridGapY;
  }
  %apply-padding-t-half {
    padding-top: 1.5 * $gridGapY;
  }
  %apply-padding-b {
    padding-bottom: 3 * $gridGapY;
  }
  %apply-padding-b-double {
    padding-bottom: 6 * $gridGapY;
  }
  %apply-padding-b-half {
    padding-bottom: 1.5 * $gridGapY;
  }
  %apply-padding-y {
    padding-block: 3 * $gridGapY;
  }
  %apply-padding-y-double {
    padding-block: 1.5 * $gridGapY;
  }
  %apply-padding-y-half {
    padding-block: 1.5 * $gridGapY;
  }
  %apply-gap-x {
    column-gap: $gridGapX;
  }
  %apply-gap-y {
    row-gap: $gridGapY;
  }
  .smucd.section--type-text {
    .container {
      row-gap: $gridGapY;
      column-gap: $gridGapX;
    }
  }
}

@mixin createTextClasses($fontPrefix) {
  @for $hierarchy from 1 through 3 {
    $key: #{$fontPrefix} + '-body-' + #{$hierarchy};
    .font-body-#{$hierarchy},
    %font-body-#{$hierarchy} {
      @include getFontPropertiesFromStyle($key);
    }
    $key: #{$fontPrefix} + '-body-' + #{$hierarchy};
    .font-body-#{$hierarchy}-dense,
    %font-body-#{$hierarchy}-dense {
      @include getFontPropertiesFromStyle($key);
    }
  }
  @for $hierarchy from 1 through 6 {
    $key: #{$fontPrefix} + '-heading-' + #{$hierarchy};
    .font-heading-#{$hierarchy},
    %font-heading-#{$hierarchy} {
      @include getFontPropertiesFromStyle($key);
    }
  }
}

body {
  background-color: getColorByToken('bg-dark');
}

.container {
  display: flex;
  flex-flow: column nowrap;
  grid-row: 1 #{'/'} span 2;
  grid-column: 2 #{'/'} span 1;
  align-items: center;
  justify-content: center;
  width: 100%;
  overflow: hidden;
  background-color: getColorByToken('bg-light');
  > * {
    overflow: hidden;
  }
}

.section {
  position: relative;
  display: grid;
  grid-template-rows: minmax(0, auto) $yGapSolivingPadding;
  &:not(:first-of-type),
  &:not(:only-of-type) {
    margin-top: -1 * $yGapSolivingPadding;
  }
  &:last-of-type,
  &:only-of-type {
    grid-template-rows: minmax(0, auto) 0;
  }
  &--type {
    &-text {
      > .container > * {
        max-width: 60ch;
        text-align: center;
        &.text--boxAlign {
          &-left {
            align-self: flex-start;
          }
          &-right {
            align-self: flex-end;
          }
        }
        &.text--textAlign {
          &-left {
            text-align: left;
          }
          &-right {
            text-align: right;
          }
        }
      }
    }
    &-media {
      > .container {
        align-items: stretch;
        padding-inline: 0;
      }
      &.section:nth-last-of-type(2) > .container {
        padding-bottom: 0;
      }
    }
    &-header,
    &-footer {
      > .container {
        align-items: stretch;
        padding-inline: 0;
        .profilePic {
          flex-shrink: 0;
          width: 3.5em;
          aspect-ratio: 1 #{'/'} 1;
          background-color: getColorByToken('color-dark', 'primary');
          border-radius: 9999rem;
        }
      }
    }
    &-header {
      > .container {
        @extend %apply-padding-x;
        @extend %apply-padding-t-double;
        @extend %apply-padding-b;
        @include al($align: 4, $gap: 1em);
        padding-top: 0;
        color: getColorByToken('onSurface-dark');
        background-color: getColorByToken('bg-dark');
        > .wrap {
          @include al($isDirX: false, $align: 1, $gap: 0.25em);
          > .title {
            @extend %font-body-1-dense;
            font-weight: 700 !important;
          }
          > .name {
            @extend %font-body-3-dense;
          }
        }
      }
    }
    &-footer {
      > .container {
        > .designInfo {
          @extend %font-heading-5;
          @extend %apply-padding-x;
          @extend %apply-padding-y;
          @include al($align: 5);
          color: getColorByToken('onSurface-dark');
          background-color: getColorByToken('surface-1-dark');
        }
        > .designerInfo {
          @extend %apply-padding-x;
          @extend %apply-padding-t;
          @include al($align: 4, $gap: 1em);
          color: getColorByToken('onSurface-dark');
          background-color: getColorByToken('surface-3-dark');
          > .wrap {
            @include al($isDirX: false, $align: 1, $gap: 0.25em);
            > .name {
              @extend %font-body-2-dense;
              font-weight: 700 !important;
            }
            > .quote {
              @extend %font-body-3-dense;
            }
          }
        }
        > .otherWorks {
          @extend %apply-padding-x;
          @extend %apply-padding-y;
          color: getColorByToken('onSurface-dark');
          background-color: getColorByToken('surface-3-dark');
          > .work {
            @extend %font-body-3;
            aspect-ratio: 16 #{'/'} 9;
            color: getColorByToken('onSurface-dark');
            background-color: getColorByToken(
              'color-container-light',
              'primary'
            );
            > .wrap {
              align-self: stretch;
              width: 100%;
              height: 100%;
              padding: 1.25em;
              background: linear-gradient(
                rgba(0, 0, 0, 0) 0%,
                rgba(0, 0, 0, 0.6) 81%
              );
              opacity: 0;
              transition: opacity 100ms;
              @include al($isDirX: false, $align: 7, $gap: 0.25em);
              &:hover {
                opacity: 1;
              }
              > * {
                align-self: stretch;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
              }
              > .title {
                font-weight: 700;
              }
            }
          }
        }
      }
      .section--type-media + & > .container {
        padding-top: 0;
      }
    }
  }
  &__bg {
    position: relative;
    z-index: -1;
    &--left {
      grid-row: 1 #{'/'} span 2;
      grid-column: 1 #{'/'} span 1;
      background-color: transparent;
    }
    &--right {
      grid-row: 1 #{'/'} span 2;
      grid-column: 3 #{'/'} span 1;
      background-color: transparent;
    }
  }
}

@include eq('hnd') {
  @include applyBreakpoint(0, 100%, 1.5rem, 4, 1rem, 1rem);
}

@include eq('tblSm') {
  @include applyBreakpoint(0, 100%, 1.5rem, 12, 1rem, 1rem);
}

@include eq('tblLg') {
  @include applyBreakpoint(1fr, 52.5rem, 2.25rem, 12, 1.5rem, 1.5rem);
}

@include eq('lpt') {
  @include applyBreakpoint(
    0,
    100%,
    min(calc(60 / 1440 * 100%), 3.75rem),
    12,
    1.5rem,
    1.5rem
  );
}

@include eq('dsk') {
  @include applyBreakpoint(
    1fr,
    minmax(0, 90rem),
    min(calc(60 / 1440 * 100%), 3.75rem),
    12,
    1.5rem,
    1.5rem
  );
}

@include ge('hnd') {
  @include createTextClasses('sm');
  .container {
    @include getFontPropertiesFromStyle('sm-body-2');
  }
  .otherWorks {
    display: grid;
    grid-template-rows: minmax(0, 1fr) minmax(0, 1fr);
    gap: 1.5rem;
  }
}

@include ge('tblLg') {
  @include createTextClasses('md');
  .container {
    @include getFontPropertiesFromStyle('md-body-2');
  }
  .otherWorks {
    display: grid;
    grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
    gap: 1.5rem;
  }
}

@include ge('lpt') {
  @include createTextClasses('lg');
  .container {
    @include getFontPropertiesFromStyle('lg-body-2');
  }
}

@mixin grid($rowGap) {
  position: relative;
  display: flex;
  flex-flow: row wrap;
  align-content: center;
  align-items: center;
  justify-content: center;
  &__item {
    display: flex;
    flex-flow: column nowrap;
    row-gap: $rowGap * 0.5;
    align-items: center;
    justify-content: center;
    &:first-child:nth-last-child(1) {
      width: 100%;
    }
    img {
      width: 100%;
      height: 100%;
    }
  }
}

@mixin grid--l() {
  $columnGap: 24px;
  $rowGap: $columnGap;
  $paddingBlock: $columnGap;
  .grid {
    @include grid($rowGap);
    row-gap: $rowGap;
    column-gap: $columnGap;
    padding-block: 1.5 * $paddingBlock;
    &--padding {
      padding-inline: calc(88 / 1400 * 100%);
    }
    &__item {
      @for $i from 2 through 8 {
        &:first-child:nth-last-child(#{$i}),
        &:first-child:nth-last-child(#{$i}) ~ & {
          width: calc((100% - $columnGap * ($i - 1)) / $i);
        }
      }
      @for $divisor from 2 through 8 {
        @for $dividend from 1 to $divisor {
          &--w-#{$dividend}x#{$divisor} {
            width: calc(
              (100% - $columnGap * ($divisor - 1)) /
                $divisor *
                $dividend +
                $columnGap *
                ($dividend - 1)
            ) !important;
          }
        }
      }
    }
  }
}

@mixin grid--s() {
  // $columnGap: 20px;
  $columnGap: 16px;
  $rowGap: $columnGap;
  $paddingBlock: $columnGap;
  .grid {
    @include grid($rowGap);
    row-gap: $rowGap;
    column-gap: $columnGap;
    padding-block: 1.5 * $paddingBlock;
    &--padding {
      padding-inline: 32px;
    }
    &__item {
      @for $i from 2 through 8 {
        &:first-child:nth-last-child(#{$i}),
        &:first-child:nth-last-child(#{$i}) ~ & {
          @if ($i > 3) {
            $newI: 0;
            @if ($i % 2 == 0) {
              $newI: 2;
            } @else {
              $newI: 3;
            }
            width: calc((100% - $columnGap * ($newI - 1)) / $newI);
          } @else {
            width: calc((100% - $columnGap * ($i - 1)) / $i);
          }
        }
      }
      @for $divisor from 2 through 8 {
        @for $dividend from 1 to $divisor {
          &--w-#{$dividend}x#{$divisor} {
            // to 100%
            @if ($dividend / $divisor > 2 / 3) {
              width: 100% !important;
            }
            // to 2/3
            @else if($dividend / $divisor == 2 / 3) {
              width: calc(
                (100% - $columnGap * (3 - 1)) / 3 * 2 + $columnGap * (2 - 1)
              ) !important;
            }
            // to 100%
            @else if($dividend / $divisor > 1 / 2) {
              width: 100% !important;
            }
            // to 1/2
            @else if($dividend / $divisor == 1 / 2) {
              width: calc(
                (100% - $columnGap * (2 - 1)) / 2 * 1 + $columnGap * (1 - 1)
              ) !important;
            }
            // to 100%
            @else if($dividend / $divisor > 1 / 3) {
              width: 100% !important;
            }
            // to 1/3
            @else if($dividend / $divisor == 1 / 3) {
              width: calc(
                (100% - $columnGap * (3 - 1)) / 3 * 1 + $columnGap * (1 - 1)
              ) !important;
            }
            // to 100%
            @else {
              width: 100% !important;
            }
          }
        }
      }
    }
  }
}

@mixin grid--xs() {
  // $columnGap: 20px;
  $columnGap: 16px;
  $rowGap: $columnGap;
  $paddingBlock: $columnGap;
  .grid {
    @include grid($rowGap);
    row-gap: $rowGap;
    column-gap: $columnGap;
    padding-block: 1.5 * $paddingBlock;
    &--padding {
      padding-inline: 16px;
    }
    &__item {
      @for $i from 2 through 8 {
        &:first-child:nth-last-child(#{$i}),
        &:first-child:nth-last-child(#{$i}) ~ & {
          width: 100%;
        }
      }
      @for $divisor from 2 through 8 {
        @for $dividend from 1 to $divisor {
          &--w-#{$dividend}x#{$divisor} {
            width: 100% !important;
          }
        }
      }
    }
  }
}

@mixin type--l() {
  :root,
  p {
    font-size: 16px;
    font-weight: 400;
    line-height: 24px;
    letter-spacing: 0.5px;
  }

  h6 {
    font-size: 14px;
    font-weight: 500;
    line-height: 20px;
    letter-spacing: 0.1px;
  }

  h3 {
    font-size: 22px;
    font-weight: 400;
    line-height: 28px;
    letter-spacing: 0px;
  }

  h2 {
    font-size: 32px;
    font-weight: 400;
    line-height: 40px;
    letter-spacing: 0px;
  }

  h1 {
    font-size: 57px;
    font-weight: 400;
    line-height: 64px;
    letter-spacing: -0.25px;
  }
}

@mixin type--m() {
  :root,
  p {
    font-size: 14px;
    font-weight: 400;
    line-height: 20px;
    letter-spacing: 0.25px;
  }
  h6 {
    font-size: 12px;
    font-weight: 500;
    line-height: 16px;
    letter-spacing: 0.5px;
  }
  h3 {
    font-size: 16px;
    font-weight: 500;
    line-height: 24px;
    letter-spacing: 0.1px;
  }
  h2 {
    font-size: 28px;
    font-weight: 400;
    line-height: 36px;
    letter-spacing: 0px;
  }
  h1 {
    font-size: 45px;
    font-weight: 400;
    line-height: 52px;
    letter-spacing: 0px;
  }
}

@mixin type--s() {
  :root,
  p {
    font-size: 12px;
    font-weight: 400;
    line-height: 16px;
    letter-spacing: 0.4px;
  }
  h6 {
    font-size: 11px;
    font-weight: 500;
    line-height: 16px;
    letter-spacing: 0.5px;
  }
  h3 {
    font-size: 14px;
    font-weight: 500;
    line-height: 20px;
    letter-spacing: 0.1px;
  }
  h2 {
    font-size: 24px;
    font-weight: 400;
    line-height: 32px;
    letter-spacing: 0px;
  }
  h1 {
    font-size: 36px;
    font-weight: 400;
    line-height: 44px;
    letter-spacing: 0px;
  }
}

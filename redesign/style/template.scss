// to do
// hidden
// auto layout function
// proper overflow hidden
// reconsider breakpoints
// gap problem

@import 'customizations';
@import 'globalFunctions';

@mixin setContainer($gapX, $gapY, $columnNum) {
  .container {
    padding-block: 1.5 * $gapY;
    @content;
    &.grid {
      grid-template-columns: repeat($columnNum, minmax(0, 1fr));
      row-gap: $gapX;
      column-gap: $gapY;
    }
    @at-root .flex {
      @include createFlexItemEqualSizeDistributor($columnNum);
    }
  }
}

@mixin createGridItemModClasses($columnNum, $bpPrefix: '') {
  @if ($bpPrefix == '') {
    @for $i from 1 through $columnNum {
      @if (($i != $columnNum) and ($i != calc($columnNum / 2))) {
        .grid-w-#{$i} {
          grid-column-end: span $i;
        }
      }
      .grid-h-#{$i} {
        grid-row-end: span $i;
      }
    }
    @for $start from 1 through $columnNum {
      .grid-x-#{$start} {
        grid-column-start: $start;
      }
      .grid-y-#{$start} {
        grid-row-start: $start;
      }
      @for $to from 1 through ($columnNum - ($start - 1)) {
        .grid-x-#{$start}-w-#{$to} {
          grid-column: $start #{'/'} span $to;
        }
      }
      @for $to from 1 through (12 - ($start - 1)) {
        .grid-y-#{$start}-h-#{$to} {
          grid-row: $start #{'/'} span $to;
        }
      }
    }
  } @else {
    @for $i from 1 through $columnNum {
      @if (($i != $columnNum) and ($i != calc($columnNum / 2))) {
        .#{$bpPrefix}-grid-w-#{$i} {
          grid-column-end: span $i;
        }
      }
      .#{$bpPrefix}-grid-h-#{$i} {
        grid-row-end: span $i;
      }
    }
    @for $start from 1 through $columnNum {
      .#{$bpPrefix}-grid-x-#{$start} {
        grid-column-start: $start;
      }
      .#{$bpPrefix}-grid-y-#{$start} {
        grid-row-start: $start;
      }
      @for $to from 1 through ($columnNum - ($start - 1)) {
        .#{$bpPrefix}-grid-x-#{$start}-w-#{$to} {
          grid-column: $start #{'/'} span $to;
        }
      }
      @for $to from 1 through (12 - ($start - 1)) {
        .#{$bpPrefix}-grid-y-#{$start}-h-#{$to} {
          grid-row: $start #{'/'} span $to;
        }
      }
    }
  }
}

@mixin createGridItemSizeClassesContinuous($columnNum) {
  .grid-w-half {
    grid-column-end: span calc($columnNum / 2);
  }
  .grid-w-full {
    grid-column-end: span $columnNum;
  }
}

@mixin createGridItemSizeClassesBp($columnNum, $bpPrefix: '') {
  .#{$bpPrefix}-grid-w-half {
    grid-column-end: span calc($columnNum / 2);
  }
  .#{$bpPrefix}-grid-w-full {
    grid-column-end: span $columnNum;
  }
}

@mixin createFlexItemEqualSizeDistributor($columnNum) {
  @for $i from 1 through 12 {
    & > *:first-child:nth-last-child(#{$i}),
    & > *:first-child:nth-last-child(#{$i}) ~ * {
      @if ($i > $columnNum) {
        flex-basis: calc(100% / $columnNum);
      } @else {
        $calibratedI: (($i - 1) % $columnNum) + 1;
        flex-basis: calc(100% / $calibratedI);
      }
    }
  }
}

@mixin createFlexItemModClasses($columnNum, $bpPrefix: '') {
  @if ($bpPrefix == '') {
    .flex-span-full {
      flex-basis: 100%;
    }
    .flex-span-half {
      flex-basis: calc(100% / 2);
    }
    @for $divisor from 2 through $columnNum {
      @for $dividend from 1 to $divisor {
        @if (calc($dividend / $divisor) != calc(1 / 2)) {
          .flex-span-#{$dividend}-#{$divisor} {
            flex-basis: calc(100% / $divisor * $dividend);
          }
        }
      }
    }
  } @else {
    .#{$bpPrefix}-flex-span-full {
      flex-basis: 100%;
    }
    .#{$bpPrefix}-flex-span-half {
      flex-basis: calc(100% / 2);
    }
    @for $divisor from 2 through $columnNum {
      @for $dividend from 1 to $divisor {
        @if (calc($dividend / $divisor) != calc(1 / 2)) {
          .#{$bpPrefix}-flex-span-#{$dividend}-#{$divisor} {
            flex-basis: calc(100% / $divisor * $dividend);
          }
        }
      }
    }
  }
}

body {
  background-color: getColorByToken('bg-dark');
}

.section {
  position: relative;
  display: flex;
  flex-flow: row nowrap;
  align-items: center;
  justify-content: center;
  &__bg {
    position: relative;
    z-index: -1;
    flex-grow: 1;
    flex-shrink: 1;
    align-self: stretch;
    &--left {
      background-color: red;
    }
    &--right {
      background-color: blue;
    }
  }
}

.container {
  flex-basis: 100%;
  flex-shrink: 1;
  background-color: getColorByToken('bg-light');
  &.grid {
    display: grid;
    &--rowHeight-even {
      grid-auto-rows: 1fr;
    }
  }
  &.flex {
    display: flex;
    flex-wrap: wrap;
    align-items: stretch;
    justify-content: center;
    > * {
      overflow: hidden;
    }
  }
  &#{&}--w-full {
    width: 100%;
    max-width: none;
  }
  &--h-full {
    min-height: 100vh;
  }
  &#{&}--px-0 {
    padding-inline: 0;
  }
  &#{&}--py-0 {
    padding-block: 0;
  }
  &#{&}--pt-0 {
    padding-top: 0;
  }
  &#{&}--pb-0 {
    padding-bottom: 0;
  }
}

@include equalTo('hnd') {
  @include setContainer(16px, 16px, 4) {
    padding-inline: 16px;
  }
}

@include equalTo('tbl') {
  @include setContainer(24px, 24px, 8) {
    padding-inline: 32px;
  }
}

@include equalTo('lpt') {
  @include setContainer(24px, 24px, 12) {
    flex-basis: auto;
    width: 904px;
    padding-inline: 32px;
  }
}

@include equalTo('dsk') {
  @include setContainer(24px, 24px, 12) {
    max-width: 1440px;
    padding-inline: min(calc(84 / 1440 * 100%), 84px);
  }
}

@include greaterThan('hnd') {
  @include createGridItemSizeClassesContinuous(4);
  @include createGridItemModClasses(4);
  .section {
    .container {
      @include createFlexItemModClasses(4);
    }
  }
}

@include greaterThan('tbl') {
  @include createGridItemSizeClassesContinuous(8);
  @include createGridItemSizeClassesBp(8, 'tbl');
  @include createGridItemModClasses(8, 'tbl');
  .section {
    .container {
      @include createFlexItemModClasses(8, 'tbl');
    }
  }
}

@include greaterThan('lpt') {
  @include createGridItemSizeClassesContinuous(12);
  @include createGridItemSizeClassesBp(12, 'tbl');
  @include createGridItemSizeClassesBp(12, 'lpt');
  @include createGridItemModClasses(12, 'lpt');
  .section {
    .container {
      @include createFlexItemModClasses(12, 'lpt');
    }
  }
}

@include greaterThan('dsk') {
  @include createGridItemSizeClassesContinuous(12);
  @include createGridItemSizeClassesBp(12, 'tbl');
  @include createGridItemSizeClassesBp(12, 'lpt');
  @include createGridItemSizeClassesBp(12, 'dsk');
  @include createGridItemModClasses(12, 'dsk');
  .section {
    .container {
      @include createFlexItemModClasses(12, 'dsk');
    }
  }
}

@use 'sass:map';
@use 'sass:list';
@use 'sass:color';
@use 'sass:math';
@import 'functions';
@import 'customizations';

@mixin getFontPropertiesFromStyle($styleName) {
  $prop-value: map.get($fontStyles, $styleName);
  @each $prop, $value in $prop-value {
    #{$prop}: #{$value};
  }
}

@function getColorFromPalettes($paletteName, $colorNumber) {
  $number-value: map.get($colorPalettes, $paletteName);
  $color: map.get($number-value, $colorNumber);
  @return $color;
}

@function getColorByToken($paletteName, $tokenName) {
  $data: map.get($colorTokens, $tokenName);
  $color: transparent;
  @if (type-of($data) == 'map') {
    @if (map.has-key($data, 'colorBg')) {
      $colorMapBg: map.get($data, 'colorBg');
      $colorMapFg: map.get($data, 'colorFg');
      $colorPaletteNameBg: map.get($colorMapBg, 'paletteName');
      $colorPaletteNameFg: map.get($colorMapFg, 'paletteName');
      @if ($colorPaletteNameFg == '') {
        $colorPaletteNameFg: $paletteName;
      }
      $colorNumberBg: map.get($colorMapBg, 'colorNumber');
      $colorNumberFg: map.get($colorMapFg, 'colorNumber');
      $colorOpacityBg: map.get($colorMapBg, 'opacity');
      $colorOpacityFg: map.get($colorMapFg, 'opacity');
      $colorBg: getColorFromPalettes($colorPaletteNameBg, $colorNumberBg);
      $colorFg: getColorFromPalettes($colorPaletteNameFg, $colorNumberFg);
      $color: blend-transparent(
        rgba($colorBg, $colorOpacityBg),
        rgba($colorFg, $colorOpacityFg)
      );
    } @else {
      @each $paletteName, $colorNumber in $data {
        $color: getColorFromPalettes($paletteName, $colorNumber);
      }
    }
  } @else {
    $color: getColorFromPalettes($paletteName, $data);
  }
  @return $color;
}

@mixin getShadowPropertiesFromStyle($styleName) {
  $prop-value: map.get($shadowStyles, $styleName);
  @each $prop, $value in $prop-value {
    #{$prop}: #{$value};
  }
}
